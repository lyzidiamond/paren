{
    "functions": [
        {
            "name": "turf/aggregate",
            "access": "",
            "virtual": false,
            "description": "Takes a set of polygons, a set of points, and an array of aggregations, then performs them. Sum, average, count, min, max, and deviation are supported.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "aggregations",
                    "type": "Array",
                    "description": "<p>an array of aggregation objects</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[[1.669921,48.632908],[1.669921,49.382372],[3.636474,49.382372],[3.636474,48.632908],[1.669921,48.632908]]]),\n  turf.polygon([[[2.230224,47.85003],[2.230224,48.611121],[4.361572,48.611121],[4.361572,47.85003],[2.230224,47.85003]]])]);\nvar points = turf.featurecollection([\n  turf.point(2.054443,49.138596, {population: 200}),\n  turf.point(3.065185,48.850258, {population: 600}),\n  turf.point(2.329101,48.79239, {population: 100}),\n  turf.point(2.614746,48.334343, {population: 200}),\n  turf.point(3.416748,48.056053, {population: 300})]);\nvar aggregations = [\n  {\n    aggregation: 'sum',\n    inField: 'population',\n    outField: 'pop_sum'\n  },\n  {\n    aggregation: 'average',\n    inField: 'population',\n    outField: 'pop_avg'\n  },\n  {\n    aggregation: 'median',\n    inField: 'population',\n    outField: 'pop_median'\n  },\n  {\n    aggregation: 'min',\n    inField: 'population',\n    outField: 'pop_min'\n  },\n  {\n    aggregation: 'max',\n    inField: 'population',\n    outField: 'pop_max'\n  },\n  {\n    aggregation: 'deviation',\n    inField: 'population',\n    outField: 'pop_deviation'\n  },\n  {\n    aggregation: 'variance',\n    inField: 'population',\n    outField: 'pop_variance'\n  },\n  {\n    aggregation: 'count',\n    inField: '',\n    outField: 'point_count'\n  }\n];\n\nvar aggregated = turf.aggregate(polygons, points, aggregations);\n\nvar result = turf.featurecollection(points.features.concat(aggregated.features));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features with properties listed as <code>outField</code> values in <code>aggregations</code></p>"
            }
        },
        {
            "name": "turf/area",
            "access": "",
            "virtual": false,
            "description": "Given any kind of GeoJSON feature, return the area of that feature,\nin square meters.",
            "parameters": [
                {
                    "name": "input",
                    "type": "GeoJSON",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]),\n  turf.polygon([[[10,0],[20,10],[20,20], [20,0]]])]);\nvar area = turf.area(polygons);\n//=area"
            ],
            "returns": {
                "type": "Number",
                "description": "<p>area in square meters</p>"
            }
        },
        {
            "name": "turf/average",
            "access": "",
            "virtual": false,
            "description": "Calculates the average value of a field for points\nwithin a set of polygons.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "field",
                    "type": "string",
                    "description": "<p>the field in the <code>points</code> features from which to pull values to average</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outputField",
                    "type": "string",
                    "description": "<p>the field in the <code>polygons</code> FeatureCollection to put results of the averages</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly1 = turf.polygon([[[10.666351,59.890659],[10.666351,59.936784],[10.762481,59.936784],[10.762481,59.890659],[10.666351,59.890659]]]);\nvar poly2 = turf.polygon([[[10.764541,59.889281],[10.764541,59.937128],[10.866165,59.937128],[10.866165,59.889281],[10.764541,59.889281]]]);\nvar polygons = turf.featurecollection([poly1, poly2]);\nvar pt1 = turf.point(10.724029,59.926807, {population: 200});\nvar pt2 = turf.point(10.715789,59.904778, {population: 600});\nvar pt3 = turf.point(10.746002,59.908566, {population: 100});\nvar pt4 = turf.point(10.806427,59.908910, {population: 200});\nvar pt5 = turf.point(10.79544,59.931624, {population: 300});\nvar points = turf.featurecollection([pt1, pt2, pt3, pt4, pt5]);\n\nvar averaged = turf.average(polygons, points, 'population', 'pop_avg');\n\nvar result = turf.featurecollection(points.features.concat(averaged.features));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features with the value of <code>outField</code> set to the calculated average</p>"
            }
        },
        {
            "name": "turf/bbox-polygon",
            "access": "",
            "virtual": false,
            "description": "Takes a bbox and returns the equivalent polygon feature.",
            "parameters": [
                {
                    "name": "bbox",
                    "type": "Array",
                    "description": "<p>an Array of bounding box coordinates in the form: <code>[xLow, yLow, xHigh, yHigh]</code></p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n\n//=poly"
            ],
            "returns": {
                "type": "Polygon",
                "description": "<p>a Polygon of the bounding box</p>"
            }
        },
        {
            "name": "turf/bearing",
            "access": "",
            "virtual": false,
            "description": "Finds the bearing between two  Point geometries.",
            "parameters": [
                {
                    "name": "start",
                    "type": "Point",
                    "description": "<p>starting Point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "end",
                    "type": "Point",
                    "description": "<p>ending Point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var point1 = turf.point(-75.343, 39.984);\nvar point2 = turf.point(-75.534, 39.123);\n\nvar bearing = turf.bearing(point1, point2);\n\n//=bearing"
            ],
            "returns": {
                "type": "number",
                "description": "<p>bearing in decimal degrees</p>"
            }
        },
        {
            "name": "turf/bezier",
            "access": "",
            "virtual": false,
            "description": "Takes a  LineString geometry returns outputs a curved version of the line\nby applying a Bezier spline\nalgorithm.\nThe bezier spline implementation is by Leszek Rybicki.",
            "parameters": [
                {
                    "name": "line",
                    "type": "LineString",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "resolution",
                    "type": "number",
                    "description": "<p>time in milliseconds between points</p>",
                    "default": "10000",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "sharpness",
                    "type": "number",
                    "description": "<p>a measure of how curvy the path should be between splines</p>",
                    "default": "0.85",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "var line = turf.linestring([\n  [-76.09130859375, 18.427501971948608],\n  [-76.695556640625, 18.729501999072138],\n  [-76.552734375, 19.40443049681278],\n  [-74.619140625, 19.134789188332523],\n  [-73.65234375, 20.076570104545173],\n  [-73.157958984375, 20.210656234489853]], {\n     stroke: '#f00'\n  });\nvar curved = turf.bezier(line);\ncurved.properties = { stroke: '#0f0' };\nvar result = turf.featurecollection([line, curved]);\n//=result"
            ],
            "returns": {
                "type": "LineString",
                "description": "<p>curved line</p>"
            }
        },
        {
            "name": "turf/buffer",
            "access": "",
            "virtual": false,
            "description": "Calculates a buffer for a  Point, {@link LineString}, or {@link Polygon} {@link Feature}/{@link FeatureCollection} for a given radius. Units supported are miles, kilometers, and degrees.",
            "parameters": [
                {
                    "name": "feature",
                    "type": "FeatureCollection",
                    "description": "<p>a Feature or FeatureCollection of any type</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "distance",
                    "type": "Number",
                    "description": "<p>distance to draw the buffer</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "unit",
                    "type": "String",
                    "description": "<p>'miles' or 'kilometers'</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt = turf.point(-90.548630, 14.616599);\nvar unit = 'miles';\n\nvar buffered = turf.buffer(pt, 500, unit);\n\nvar result = turf.featurecollection(\n  buffered.features.concat(pt));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection containing {@link Polygon} features representing buffers</p>"
            }
        },
        {
            "name": "turf/center",
            "access": "",
            "virtual": false,
            "description": "Calculates the absolute center point of all features.",
            "parameters": [
                {
                    "name": "fc",
                    "type": "FeatureCollection",
                    "description": "<p>a GeoJSON Feature or FeatureCollection</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var features = [\n    turf.point(-97.522259, 35.469100),\n    turf.point(-97.502754, 35.463455),\n    turf.point(-97.508269, 35.463245),\n    turf.point(-97.516809, 35.465779),\n    turf.point(-97.515372, 35.467072),\n    turf.point(-97.509363, 35.463053),\n    turf.point(-97.511123, 35.466601),\n    turf.point(-97.518547, 35.469327),\n    turf.point(-97.519706, 35.469659),\n    turf.point(-97.517839, 35.466998),\n    turf.point(-97.508678, 35.464942),\n    turf.point(-97.514914, 35.463453)\n];\nvar fc = turf.featurecollection(features);\nvar centerPt = turf.center(fc);\ncenterPt.properties['marker-size'] = 'large';\ncenterPt.properties['marker-color'] = '#000';\nvar result = turf.featurecollection(fc.features.concat(centerPt));\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a GeoJSON FeatureCollection of the\nabsolute center points of all input features</p>"
            }
        },
        {
            "name": "turf/centroid",
            "access": "",
            "virtual": false,
            "description": "Calculates the centroid of a polygon Feature or\nFeatureCollection using the geometric mean of all vertices.\nThis lessens the effect of small islands and artifacts when calculating\nthe centroid of a set of polygons.",
            "parameters": [
                {
                    "name": "fc",
                    "type": "FeatureCollection",
                    "description": "<p>a {@link Feature} or FeatureCollection of any type</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly = turf.polygon([[\n\t[105.818939,21.004714],\n\t[105.818939,21.061754],\n\t[105.890007,21.061754],\n\t[105.890007,21.004714],\n\t[105.818939,21.004714]\n]]);\n\nvar centroidPt = turf.centroid(poly);\n\nvar result = turf.featurecollection([poly, centroidPt]);\n\n//=result"
            ],
            "returns": {
                "type": "Point",
                "description": "<p>a Point showing the centroid of the input feature(s)</p>"
            }
        },
        {
            "name": "turf/combine",
            "access": "",
            "virtual": false,
            "description": "Combines a FeatureCollection of point, linestring, or polygon Features into multipoint, multilinestring, or multipolygon Features.",
            "parameters": [
                {
                    "name": "fc",
                    "type": "FeatureCollection",
                    "description": "<p>a {@link Feature} or {@link FeatureCollection} of any type</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(19.026432, 47.49134);\nvar pt2 = turf.point(19.074497, 47.509548);\nvar fc = turf.featurecollection([pt1, pt2]);\n\nvar combined = turf.combine(fc);\n\n//=combined"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of corresponding type to input</p>"
            }
        },
        {
            "name": "turf/concave",
            "access": "",
            "virtual": false,
            "description": "Takes a set of points and\nreturns a concave hull\nInternally, this implements\na Monotone chain algorithm.",
            "parameters": [
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "maxEdge",
                    "type": "number",
                    "description": "<p>the size of an edge necessary for part of the\nhull to become concave (in miles)</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var points = turf.featurecollection([\n turf.point(-63.601226, 44.642643),\n turf.point(-63.591442, 44.651436),\n turf.point(-63.580799, 44.648749),\n turf.point(-63.573589, 44.641788),\n turf.point(-63.587665, 44.64533),\n turf.point(-63.595218, 44.64765)]);\n\nvar hull = turf.concave(points, 1);\n\nvar result = turf.featurecollection(\n points.features.concat(hull));\n\n//=result"
            ],
            "returns": {
                "type": "Feature",
                "description": "<p>a {@link Polygon} feature</p>"
            }
        },
        {
            "name": "turf/convex",
            "access": "",
            "virtual": false,
            "description": "Takes a set of points and\nreturns a convex hull polygon.\nInternally this implements\na Monotone chain algorithm.",
            "parameters": [
                {
                    "name": "input",
                    "type": "GeoJSON",
                    "description": "<p>any GeoJSON object</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var points = turf.featurecollection([\n  turf.point(10.195312, 43.755225),\n  turf.point(10.404052, 43.8424511),\n  turf.point(10.579833, 43.659924),\n  turf.point(10.360107, 43.516688),\n  turf.point(10.14038, 43.588348),\n  turf.point(10.195312, 43.755225)]);\n\nvar result = turf.featurecollection(\n  points.features.concat([turf.convex(points)]));\n//=result"
            ],
            "returns": {
                "type": "Feature",
                "description": "<p>a {@link Polygon} feature</p>"
            }
        },
        {
            "name": "turf/count",
            "access": "",
            "virtual": false,
            "description": "Calculates the number of points that fall within a set of polygons.",
            "parameters": [
                {
                    "name": "polyFC",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "pointFC",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "countField",
                    "type": "String",
                    "description": "<p>a field to append to the attributes of the Polygon features representing Point counts</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly1 = turf.polygon([[\n [-112.072391,46.586591],\n [-112.072391,46.61761],\n [-112.028102,46.61761],\n [-112.028102,46.586591],\n [-112.072391,46.586591]\n]]);\nvar poly2 = turf.polygon([[\n [-112.023983,46.570426],\n [-112.023983,46.615016],\n [-111.966133,46.615016],\n [-111.966133,46.570426],\n [-112.023983,46.570426]\n]]);\nvar polyFC = turf.featurecollection([poly1, poly2]);\nvar pt1 = turf.point(-112.0372, 46.608058, {population: 200});\nvar pt2 = turf.point(-112.045955, 46.596264,\n {population: 600});\nvar ptFC = turf.featurecollection([pt1, pt2]);\n\nvar counted = turf.count(polyFC, ptFC, 'pt_count');\n\nvar result = turf.featurecollection(\n  ptFC.features.concat(counted.features));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of Polygon features with <code>countField</code> appended</p>"
            }
        },
        {
            "name": "turf/destination",
            "access": "",
            "virtual": false,
            "description": "Calculates the destination point given a  Point feature; distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.",
            "parameters": [
                {
                    "name": "start",
                    "type": "Point",
                    "description": "<p>a Point feature at the starting point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "distance",
                    "type": "Number",
                    "description": "<p>distance from the starting point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "bearing",
                    "type": "Number",
                    "description": "<p>ranging from -180 to 180</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "units",
                    "type": "String",
                    "description": "<p>miles, kilometers, degrees, or radians</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var point1 = turf.point(-75.343, 39.984);\nvar distance = 50;\nvar bearing = 90;\nvar units = 'miles';\n\nvar destination = turf.destination(point1, distance, bearing, units);\npoint1.properties['marker-color'] = '#f00';\ndestination.properties['marker-color'] = '#0f0';\n\nvar result = turf.featurecollection([point1, destination]);\n\n//=result"
            ],
            "returns": {
                "type": "Point",
                "description": "<p>a {@link Point} feature at the destination</p>"
            }
        },
        {
            "name": "turf/deviation",
            "access": "",
            "virtual": false,
            "description": "Calculates the standard deviation value of a field for points within a set of polygons.",
            "parameters": [
                {
                    "name": "polyFC",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "pointFC",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "String",
                    "description": "<p>the field in <code>pointFC</code> from which to aggregate</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "String",
                    "description": "<p>the field to append to polyFC representing deviation</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly1 = turf.polygon([[\n  [-97.807159, 30.270335],\n  [-97.807159, 30.369913],\n  [-97.612838, 30.369913],\n  [-97.612838, 30.270335],\n  [-97.807159, 30.270335]\n]]);\nvar poly2 = turf.polygon([[\n  [-97.825698, 30.175405],\n  [-97.825698, 30.264404],\n  [-97.630691, 30.264404],\n  [-97.630691, 30.175405],\n  [-97.825698, 30.175405]\n]]);\nvar polyFC = turf.featurecollection([poly1, poly2]);\nvar pt1 = turf.point(-97.709655, 30.311245,\n  {population: 500});\nvar pt2 = turf.point(-97.766647, 30.345028,\n  {population: 400});\nvar pt3 = turf.point(-97.765274, 30.294646,\n  {population: 600});\nvar pt4 = turf.point(-97.753601, 30.216355,\n  {population: 500});\nvar pt5 = turf.point(-97.667083, 30.208047,\n  {population: 200});\nvar ptFC = turf.featurecollection([pt1, pt2, pt3, pt4, pt5]);\n\nvar inField = 'population';\nvar outField = 'pop_deviation';\n\nvar deviated = turf.deviation(\n  polyFC, ptFC, inField, outField);\n\nvar result = turf.featurecollection(\n  ptFC.features.concat(deviated.features));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of Polygon features with appended field representing deviation</p>"
            }
        },
        {
            "name": "turf/distance",
            "access": "",
            "virtual": false,
            "description": "Calculates the distance between two  Point features in degrees,\nradians, miles, or kilometers. This uses the\nHaversine formula\nto account for global curvature.",
            "parameters": [
                {
                    "name": "from",
                    "type": "Point",
                    "description": "<p>origin point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "to",
                    "type": "Point",
                    "description": "<p>destination point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "units",
                    "type": "String",
                    "description": "<p>can be degrees, radians, miles, or kilometers</p>",
                    "default": "kilometers",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "var point1 = turf.point(-75.343, 39.984);\nvar point2 = turf.point(-75.534, 39.123);\nvar units = 'miles';\nvar distance = turf.distance(point1, point2, units);\n\n//=distance"
            ],
            "returns": {
                "type": "Number",
                "description": "<p>distance between the two points</p>"
            }
        },
        {
            "name": "turf/envelope",
            "access": "",
            "virtual": false,
            "description": "Takes a  Feature or {@link FeatureCollection} and returns a rectangular {@link Polygon} feature that encompasses all vertices.",
            "parameters": [
                {
                    "name": "fc",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of any type</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(-75.343, 39.984, {name: 'Location A'});\nvar pt2 = turf.point(-75.833, 39.284, {name: 'Location B'});\nvar pt3 = turf.point(-75.534, 39.123, {name: 'Location C'});\nvar fc = turf.featurecollection([pt1, pt2, pt3]);\n\nvar enveloped = turf.envelope(fc);\n\nvar result = turf.featurecollection(\n\tfc.features.concat(enveloped));\n\n//=result"
            ],
            "returns": {
                "type": "Polygon",
                "description": "<p>a rectangular Polygon feature that encompasses all vertices</p>"
            }
        },
        {
            "name": "turf/erase",
            "access": "",
            "virtual": false,
            "description": "Finds the difference between two polygons by clipping the second\npolygon from the first.",
            "parameters": [
                {
                    "name": "poly1",
                    "type": "Polygon",
                    "description": "<p>input Polygon feaure</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "poly2",
                    "type": "Polygon",
                    "description": "<p>Polygon feature to erase from <code>poly1</code></p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly1 = turf.polygon([[\n [-46.738586, -23.596711],\n [-46.738586, -23.458207],\n [-46.560058, -23.458207],\n [-46.560058, -23.596711],\n [-46.738586, -23.596711]\n]]);\npoly1.properties.fill = '#0f0';\nvar poly2 = turf.polygon([[\n [-46.650009, -23.631314],\n [-46.650009, -23.5237],\n [-46.509246, -23.5237],\n [-46.509246, -23.631314],\n [-46.650009, -23.631314]\n]]);\npoly2.properties.fill = '#00f';\n\nvar erased = turf.erase(poly1, poly2);\nerased.properties.fill = '#f00';\n\nvar polygons = turf.featurecollection([poly1, poly2]);\n\n//=polygons\n\n//=erased"
            ],
            "returns": {
                "type": "Polygon",
                "description": "<p>a Polygon feature showing the area of <code>poly1</code> excluding the area of <code>poly2</code></p>"
            }
        },
        {
            "name": "turf/explode",
            "access": "",
            "virtual": false,
            "description": "Takes any  GeoJSON objecT and return all positions as\na collection of {@link Point|Points}.",
            "parameters": [
                {
                    "name": "input",
                    "type": "GeoJSON",
                    "description": "<p>input features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly = turf.polygon([[\n [177.396755, -17.795112],\n [177.422161, -17.783506],\n [177.439155, -17.799851],\n [177.426624, -17.826164],\n [177.404651, -17.836459],\n [177.385425, -17.812926],\n [177.381134, -17.797563],\n [177.396755, -17.795112]\n]]);\n\nvar points = turf.explode(poly);\n\n//=poly\n\n//=points"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of Point features representing the exploded input features</p>"
            }
        },
        {
            "name": "turf/extent",
            "access": "",
            "virtual": false,
            "description": "Calculates the extent of all input features and returns a bounding box.",
            "parameters": [
                {
                    "name": "input",
                    "type": "GeoJSON-Object",
                    "description": "<p>any valid GeoJSON Object</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(114.175329, 22.2524);\nvar pt2 = turf.point(114.170007, 22.267969);\nvar pt3 = turf.point(114.200649, 22.274641);\nvar pt4 = turf.point(114.186744, 22.265745);\nvar fc = turf.featurecollection(\n [pt1, pt2, pt3, pt4]);\n\nvar bbox = turf.extent(fc);\nconsole.log(bbox); //\n\nvar bboxPolygon = turf.bboxPolygon(bbox);\nbboxPolygon.properties.fill = '#00f';\n\nvar result = turf.featurecollection(\n fc.features.concat(bboxPolygon));\n\n//=result"
            ],
            "returns": {
                "type": "Array.<number>",
                "description": "<p>the bounding box of the GeoJSON given\nas an array in WSEN order (west, south, east, north)</p>"
            }
        },
        {
            "name": "turf/featurecollection",
            "access": "",
            "virtual": false,
            "description": "Creates a  FeatureCollection",
            "parameters": [
                {
                    "name": "features",
                    "type": "Feature",
                    "description": "<p>input Features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(-75.343, 39.984, {name: 'Location A'});\nvar pt2 = turf.point(-75.833, 39.284, {name: 'Location B'});\nvar pt3 = turf.point(-75.534, 39.123, {name: 'Location C'});\nvar fc = turf.featurecollection([pt1, pt2, pt3]);\n\n//=fc"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of input features</p>"
            }
        },
        {
            "name": "turf/filter",
            "access": "",
            "virtual": false,
            "description": "Filters a  FeatureCollection by a  property key-value combination",
            "parameters": [
                {
                    "name": "features",
                    "type": "FeatureCollection",
                    "description": "<p>input FeatureCollection</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "key",
                    "type": "String",
                    "description": "<p>the property on which to filter</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "String",
                    "description": "<p>the value of that property on which to filter</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var trees = turf.featurecollection([\n turf.point(-72.581777, 44.260875, {species: 'oak'}),\n turf.point(-72.570018, 44.260691, {species: 'birch'}),\n turf.point(-72.576284, 44.257925, {species: 'oak'}),\n turf.point(-72.56916, 44.254605, {species: 'redwood'}),\n turf.point(-72.581691, 44.24858, {species: 'maple'}),\n turf.point(-72.583837, 44.255773, {species: 'oak'})\n]);\n\nvar filtered = turf.filter(trees, 'species', 'oak');\n\n//=trees\n\n//=filtered"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a filtered collection with only features that match input <code>key</code> and <code>value</code></p>"
            }
        },
        {
            "name": "turf/flip",
            "access": "",
            "virtual": false,
            "description": "Takes any GeoJSON object and flips all of its coordinates\nfrom [x, y] to [y, x].",
            "parameters": [
                {
                    "name": "input",
                    "type": "GeoJSON",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var saudiArabia = turf.point([20.56640625, 43.42100882994726]);\n//=saudiArabia\nvar serbia = turf.flip(saudiArabia);\n//=serbia"
            ],
            "returns": {
                "type": "GeoJSON",
                "description": "<p>output</p>"
            }
        },
        {
            "name": "turf/grid",
            "access": "",
            "virtual": false,
            "description": "Takes a bounding box and a cell depth and outputs points in a grid.",
            "parameters": [
                {
                    "name": "extent",
                    "type": "Array.<number>",
                    "description": "<p>extent in [xmin, ymin, xmax, ymax] order</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "depth",
                    "type": "Number",
                    "description": "<p>how many cells to output</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar depth = 10;\n\nvar grid = turf.grid(extent, depth);\n\n//=grid"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>grid as FeatureCollection with {@link Point} features</p>"
            }
        },
        {
            "name": "turf/hex",
            "access": "",
            "virtual": false,
            "description": "Takes a bounding box and a cell size in degrees and creates a  FeatureCollection of flat-topped\nhexagons aligned in an &quot;odd-q&quot; vertical grid as\ndescribed in Hexagonal Grids",
            "parameters": [
                {
                    "name": "bbox",
                    "type": "Array.<number>",
                    "description": "<p>bounding box in [minX, minY, maxX, maxY] order</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "size",
                    "type": "Number",
                    "description": "<p>size of cells in degrees</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var bbox = [7.2669410, 43.695307, 7.2862529, 43.706476];\nvar size = 0.001;\nvar hexgrid = turf.hex(bbox, size);\n\n//=hexgrid"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of hexagonal Polygon features in a grid</p>"
            }
        },
        {
            "name": "turf/inside",
            "access": "",
            "virtual": false,
            "description": "Checks to see if a  Point is inside of a {@link Polygon}. The Polygon can\nbe convex or concave. The function accepts any valid Polygon or {@link MultiPolygon}\nand accounts for holes.",
            "parameters": [
                {
                    "name": "point",
                    "type": "Point",
                    "description": "<p>a Point feature</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "polygon",
                    "type": "Polygon",
                    "description": "<p>a Polygon feature</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(-111.467285, 40.75766);\npt1.properties['marker-color'] = \"#f00\";\nvar pt2 = turf.point(-111.873779, 40.647303);\npt2.properties['marker-color'] = \"#0f0\";\nvar poly = turf.polygon([[\n [-112.074279, 40.52215],\n [-112.074279, 40.853293],\n [-111.610107, 40.853293],\n [-111.610107, 40.52215],\n [-112.074279, 40.52215]\n]]);\nvar features = turf.featurecollection([pt1, pt2, poly]);\n\n//=features\n\nvar isInside1 = turf.inside(pt1, poly);\n//=isInside1\n\nvar isInside2 = turf.inside(pt2, poly);\n//=isInside2"
            ],
            "returns": {
                "type": "boolean",
                "description": "<p>whether the Point is inside the Polygon</p>"
            }
        },
        {
            "name": "turf/intersect",
            "access": "",
            "virtual": false,
            "description": "Takes two  Polygon features and finds their intersection.",
            "parameters": [
                {
                    "name": "poly1",
                    "type": "Polygon",
                    "description": "<p>the first Polygon</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "poly2",
                    "type": "Polygon",
                    "description": "<p>the second Polygon</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly1 = turf.polygon([[\n [-122.801742, 45.48565],\n [-122.801742, 45.60491],\n [-122.584762, 45.60491],\n [-122.584762, 45.48565],\n [-122.801742, 45.48565]\n]]);\npoly1.properties.fill = '#0f0';\nvar poly2 = turf.polygon([[\n [-122.520217, 45.535693],\n [-122.64038, 45.553967],\n [-122.720031, 45.526554],\n [-122.669906, 45.507309],\n [-122.723464, 45.446643],\n [-122.532577, 45.408574],\n [-122.487258, 45.477466],\n [-122.520217, 45.535693]\n]]);\npoly2.properties.fill = '#00f';\nvar polygons = turf.featurecollection([poly1, poly2]);\n\nvar intersection = turf.intersect(poly1, poly2);\n\n//=polygons\n\n//=intersection"
            ],
            "returns": {
                "type": "Polygon",
                "description": "<p>a Polygon feature representing the area where <code>poly1</code> and <code>poly2</code> overlap</p>"
            }
        },
        {
            "name": "turf/isobands",
            "access": "",
            "virtual": false,
            "description": "Takes a  FeatureCollection of points with z values and an array of\nvalue breaks and generates filled contour isobands. These are commonly\nused to create elevation maps, but can be used for general data\ninterpolation as well.",
            "parameters": [
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "z",
                    "type": "string",
                    "description": "<p>a property name from which z values will be pulled</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "resolution",
                    "type": "number",
                    "description": "<p>resolution of the underlying grid</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "breaks",
                    "type": "Array.<number>",
                    "description": "<p>where to draw contours</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// create random points with random\n// z-values in their properties\nvar points = turf.random('point', 100, {\n  bbox: [0, 30, 20, 50]\n});\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar isolined = turf.isobands(points, 'z', 15, breaks);\n//=isolined"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>isolines</p>"
            }
        },
        {
            "name": "turf/isolines",
            "access": "",
            "virtual": false,
            "description": "Takes a  FeatureCollection of points with z values and an array of\nvalue breaks and generates isolines.\nThese are commonly used to create elevation maps, but can be used\nfor general data interpolation as well.",
            "parameters": [
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a collection containing only Features with\n{@link Point} geometries</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "z",
                    "type": "string",
                    "description": "<p>field in properties to contour</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "resolution",
                    "type": "number",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "breaks",
                    "type": "Array.<number>",
                    "description": "<p>at which to draw contours</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// create random points with random\n// z-values in their properties\nvar points = turf.random('point', 100, {\n  bbox: [0, 30, 20, 50]\n});\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar isolined = turf.isolines(points, 'z', 15, breaks);\n//=isolined"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>isolines</p>"
            }
        },
        {
            "name": "turf/jenks",
            "access": "",
            "virtual": false,
            "description": "Given a FeatureCollection, return the Jenks Natural breaks\nof a given property",
            "parameters": [
                {
                    "name": "input",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of any type</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "field",
                    "type": "string",
                    "description": "<p>the property in <code>input</code> on which to calculate Jenks natural breaks</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "numberOfBreaks",
                    "type": "number",
                    "description": "<p>number of classes in which to group the data</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var points = turf.featurecollection([\n  turf.point(49.859733, 40.400424, {population: 200}),\n  turf.point(49.83879, 40.401209, {population: 600}),\n  turf.point(49.817848, 40.376889, {population: 100}),\n  turf.point(49.840507, 40.386043, {population: 200}),\n  turf.point(49.854583, 40.37532, {population: 300})]);\nvar breaks = turf.jenks(points, 'population', 3);\n//=breaks"
            ],
            "returns": {
                "type": "Array.<number>",
                "description": "<p>the break number for each class plus the minimum and maximum values</p>"
            }
        },
        {
            "name": "turf/kinks",
            "access": "",
            "virtual": false,
            "description": "Takes a polygon and detects all self-intersections.",
            "parameters": [
                {
                    "name": "polygon",
                    "type": "Polygon",
                    "description": "<p>a Polygon feature</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly = turf.polygon([[\n [-12.034835, 8.901183],\n [-12.060413, 8.899826],\n [-12.03638, 8.873199],\n [-12.059383, 8.871418],\n [-12.034835, 8.901183]\n]]);\n\nvar kinks = turf.kinks(poly);\n\nvar result = turf.featurecollection(\n kinks.intersections.features.concat(poly));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of Point features representing self-intersections</p>"
            }
        },
        {
            "name": "turf/linestring",
            "access": "",
            "virtual": false,
            "description": "Creates a  LineString {@link Feature} based on a\ncoordinate array. Properties can be added optionally.",
            "parameters": [
                {
                    "name": "coordinates",
                    "type": "Array.<Array.<number>>",
                    "description": "<p>an array of Positions</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "properties",
                    "type": "Object",
                    "description": "<p>an Object consisting of key-value pairs to add as properties</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var linestring1 = turf.linestring([\n\t[-21.964416, 64.148203],\n\t[-21.956176, 64.141316],\n\t[-21.93901, 64.135924],\n\t[-21.927337, 64.136673]\n]);\nvar linestring2 = turf.linestring([\n\t[-21.929054, 64.127985],\n\t[-21.912918, 64.134726],\n\t[-21.916007, 64.141016],\n\t[-21.930084, 64.14446]\n], {name: 'line 1', distance: 145});\n\n//=linestring1\n\n//=linestring2"
            ],
            "returns": {
                "type": "LineString",
                "description": "<p>a LineString feature</p>"
            }
        },
        {
            "name": "turf/max",
            "access": "",
            "virtual": false,
            "description": "Calculates the maximum value of a field for points within a set of polygons.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "string",
                    "description": "<p>the field in input data to analyze</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "string",
                    "description": "<p>the field in which to store results</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[\n    [101.551437, 3.150114],\n    [101.551437, 3.250208],\n    [101.742324, 3.250208],\n    [101.742324, 3.150114],\n    [101.551437, 3.150114]\n  ]]),\n  turf.polygon([[\n    [101.659927, 3.011612],\n    [101.659927, 3.143944],\n    [101.913986, 3.143944],\n    [101.913986, 3.011612],\n    [101.659927, 3.011612]\n  ]])\n]);\nvar points = turf.featurecollection([\n  turf.point(101.56105, 3.213874, {population: 200}),\n  turf.point(101.709365, 3.211817, {population: 600}),\n  turf.point(101.645507, 3.169311, {population: 100}),\n  turf.point(101.708679, 3.071266, {population: 200}),\n  turf.point(101.826782, 3.081551, {population: 300})]);\n\nvar aggregated = turf.max(\n  polygons, points, 'population', 'max');\n\nvar result = turf.featurecollection(\n  points.features.concat(aggregated.features));\n\n//=result"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features\nwith properties listed as <code>outField</code> values</p>"
            }
        },
        {
            "name": "turf/median",
            "access": "",
            "virtual": false,
            "description": "Takes a set of polygons, a set of points, and tag polygons with the sum\nof point property values contained within.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "string",
                    "description": "<p>the field in input data to analyze</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "string",
                    "description": "<p>the field in which to store results</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]),\n  turf.polygon([[[10,0],[20,10],[20,20], [20,0]]])]);\nvar points = turf.featurecollection([\n  turf.point(5,5, {population: 200}),\n  turf.point(1,3, {population: 600}),\n  turf.point(14,2, {population: 100}),\n  turf.point(13,1, {population: 200}),\n  turf.point(19,7, {population: 300})]);\nvar aggregated = turf.median(polygons, points, 'population', 'median');\n//=polygons\n//=points\n//=aggregated"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features\nwith properties listed as <code>outField</code> values in <code>aggregations</code></p>"
            }
        },
        {
            "name": "turf/merge",
            "access": "",
            "virtual": false,
            "description": "Takes a feature collection of polygons and outputs a single merged\npolygon feature.",
            "parameters": [
                {
                    "name": "features",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var a = turf.polygon([[[10,0],[20,10],[20,0],[10,0]]]);\na.properties.fill = '#0f0';\nvar b = turf.polygon([[[10+5,0+5],[20+5,10+5],[20+5,0+5],[10+5,0+5]]]);\nb.properties.fill = '#00f';\nvar erased = turf.erase(JSON.parse(JSON.stringify(a)), b);\nvar a = turf.polygon([[[10,0],[20,10],[20,0],[10,0]]]);\na.properties.fill = '#0f0';\nvar b = turf.polygon([[[10+5,0+5],[20+5,10+5],[20+5,0+5],[10+5,0+5]]]);\nb.properties.fill = '#00f';\nvar merged = turf.merge(turf.featurecollection([a, b]));\n//=a\n//=b\n//=merged"
            ],
            "returns": {
                "type": "Feature",
                "description": ""
            }
        },
        {
            "name": "turf/midpoint",
            "access": "",
            "virtual": false,
            "description": "Takes two point features and returns a point between the two.",
            "parameters": [
                {
                    "name": "a",
                    "type": "Point",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "b",
                    "type": "Point",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(0,0)\nvar pt2 = turf.point(10, 0)\nvar midpointed = turf.midpoint(pt1, pt2)\nvar features = turf.featurecollection([\n pt1, pt2, midpointed]);\n//=features"
            ],
            "returns": {
                "type": "Point",
                "description": "<p>a point between the two</p>"
            }
        },
        {
            "name": "turf/min",
            "access": "",
            "virtual": false,
            "description": "Takes a set of polygons, a set of points, and tag polygons with the sum\nof point property values contained within.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "string",
                    "description": "<p>the field in input data to analyze</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "string",
                    "description": "<p>the field in which to store results</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]),\n  turf.polygon([[[10,0],[20,10],[20,20], [20,0]]])]);\nvar points = turf.featurecollection([\n  turf.point(5,5, {population: 200}),\n  turf.point(1,3, {population: 600}),\n  turf.point(14,2, {population: 100}),\n  turf.point(13,1, {population: 200}),\n  turf.point(19,7, {population: 300})]);\nvar aggregated = turf.min(polygons, points, 'population', 'min');\n//=polygons\n//=points\n//=aggregated"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features\nwith properties listed as <code>outField</code> values in <code>aggregations</code></p>"
            }
        },
        {
            "name": "turf/nearest",
            "access": "",
            "virtual": false,
            "description": "Returns the  Point feature closest to the input.",
            "parameters": [
                {
                    "name": "point",
                    "type": "Point",
                    "description": "<p>the reference point</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "against",
                    "type": "FeatureCollection",
                    "description": "<p>a collection of {@link Feature|features}\nwith {@link Point} geometries</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [],
            "returns": {
                "type": "Feature",
                "description": "<p>the closest point feature to point</p>"
            }
        },
        {
            "name": "turf/planepoint",
            "access": "",
            "virtual": false,
            "description": "Takes a trianglular plane and calculates the z value\nfor a point on the plane.",
            "parameters": [
                {
                    "name": "interpolatedPoint",
                    "type": "Point",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "triangle",
                    "type": "Array.<Array.<number>>",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var point = turf.point(-75.3221, 39.529);\n// triangle is a polygon with \"a\", \"b\",\n// and \"c\" values representing\n// the values of the coordinates in order.\nvar triangle = turf.polygon(\n  [[[-75.1221,39.57],[-75.58,39.18],[-75.97,39.86]]],\n  {\"a\": 11, \"b\": 122, \"c\": 44});\nvar zValue = turf.planepoint(point, triangle);\n//=zValue"
            ],
            "returns": {
                "type": "number",
                "description": "<p>the value at that point</p>"
            }
        },
        {
            "name": "turf/pointOnSurface",
            "access": "",
            "virtual": false,
            "description": "Finds a  Point guaranteed to be on the surface of\n{@link GeoJSON} object.\n\nGiven a {@link Polygon}, the point will be in the area of the polygon\nGiven a {@link LineString}, the point will be along the string\nGiven a {@link Point}, the point will the same as the input\n",
            "parameters": [
                {
                    "name": "input",
                    "type": "GeoJSON",
                    "description": "<p>any GeoJSON object</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// create a random polygon\nvar polygon = turf.random('polygon');\n\n// place a point on it\nvar pointOnPolygon = turf.pointOnSurface(polygon);\n\n// show both of them\nvar fc = turf.featurecollection([polygon, pointOnPolygon]);\n//=fc"
            ],
            "returns": {
                "type": "Feature",
                "description": "<p>a point on the surface</p>"
            }
        },
        {
            "name": "turf/point",
            "access": "",
            "virtual": false,
            "description": "Generates a new  Point feature, given coordinates\nand, optionally, properties.",
            "parameters": [
                {
                    "name": "longitude",
                    "type": "number",
                    "description": "<p>position west to east in decimal degrees</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "latitude",
                    "type": "number",
                    "description": "<p>position south to north in decimal degrees</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "properties",
                    "type": "Object",
                    "description": "<p>an optional object that is used as the Feature's\nproperties</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var pt1 = turf.point(-75.343, 39.984);\n//=pt1"
            ],
            "returns": {
                "type": "Point",
                "description": "<p>output</p>"
            }
        },
        {
            "name": "turf/polygon",
            "access": "",
            "virtual": false,
            "description": "Generates a new GeoJSON Polygon feature, given an array of coordinates\nand list of properties.",
            "parameters": [
                {
                    "name": "rings",
                    "type": "Array.<Array.<number>>",
                    "description": "<p>an array of LinearRings</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "properties",
                    "type": "Object",
                    "description": "<p>an optional properties object</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var poly1 = turf.polygon([[[20.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]])\nvar poly2 = turf.polygon([[[20.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]],\n  {name: 'line 1', distance: 145})\nconsole.log(poly1)\nconsole.log(poly2)"
            ],
            "returns": {
                "type": "GeoJSONPolygon",
                "description": "<p>output</p>"
            }
        },
        {
            "name": "turf/quantile",
            "access": "",
            "virtual": false,
            "description": "Given a FeatureCollection, return the quantiles of a given property",
            "parameters": [
                {
                    "name": "input",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "field",
                    "type": "string",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "numberOfBreaks",
                    "type": "number",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var points = turf.featurecollection([\n  turf.point(5,5, {population: 200}),\n  turf.point(1,3, {population: 600}),\n  turf.point(14,2, {population: 100}),\n  turf.point(13,1, {population: 200}),\n  turf.point(19,7, {population: 300})]);\nvar breaks = turf.quantile(points, 'population', 2);\n//=breaks"
            ],
            "returns": {
                "type": "Array.<number>",
                "description": "<p>the number of breaks</p>"
            }
        },
        {
            "name": "turf/random",
            "access": "",
            "virtual": false,
            "description": "Generates random GeoJSON data, including Points and Polygons, for testing\nand experimentation.",
            "parameters": [
                {
                    "name": "type",
                    "type": "String",
                    "description": "<p>type of features desired. Valid values\nare 'points' or 'polygons'</p>",
                    "default": "'point'",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "count",
                    "type": "Number",
                    "description": "<p>how many geometries should be generated.</p>",
                    "default": "1",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options",
                    "type": "Object",
                    "description": "<p>relevant to the feature desired. Can include:</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "options.bbox",
                    "type": "Array.<number>",
                    "description": "<p>a bounding box inside of which geometries\nare placed. In the case of points, they are guaranteed to be within this bounds,\nwhile polygons have their centroid within it.</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "options.num_vertices",
                    "type": "Number",
                    "description": "<p>the number of vertices added\nto polygon features.</p>",
                    "default": "10",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options.max_radial_length",
                    "type": "Number",
                    "description": "<p>the total number of decimal\ndegrees longitude or latitude that a polygon can extent outwards to\nfrom its center.</p>",
                    "default": "10",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "var points = turf.random('points', 100, {\n  bbox: [-70, 40, -60, 60]\n});\n//=points\nvar polygons = turf.random('polygons', 4, {\n  bbox: [-70, 40, -60, 60]\n});\n//=polygons"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>generated random features</p>"
            }
        },
        {
            "name": "turf/reclass",
            "access": "",
            "virtual": false,
            "description": "Takes a featurecollection, a in field, an out field, and\nan array of translations and outputs an identical feature collection with\nthe out field property populated.",
            "parameters": [
                {
                    "name": "input",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "string",
                    "description": "<p>field to map</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "string",
                    "description": "<p>the field in which to store results</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [],
            "returns": {
                "type": "Array.<number>",
                "description": "<p>an array of translations</p>"
            }
        },
        {
            "name": "turf/remove",
            "access": "",
            "virtual": false,
            "description": "Filter a FeatureCollection by a desired property key-value combination.",
            "parameters": [
                {
                    "name": "features",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "key",
                    "type": "string",
                    "description": "<p>the key in a feature's properties property</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "string",
                    "description": "<p>the desired value of that property</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var trees = turf.featurecollection([\n turf.point(1,2, {species: 'oak'}),\n turf.point(2,1, {species: 'birch'}),\n turf.point(3,1, {species: 'oak'}),\n turf.point(2,2, {species: 'redwood'}),\n turf.point(2,3, {species: 'maple'}),\n turf.point(4,2, {species: 'oak'})\n]);\n//=trees\nvar filtered = turf.remove(trees, 'species', 'oak');\n//=filtered"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a filtered collection with only features that don't match.</p>"
            }
        },
        {
            "name": "turf/sample",
            "access": "",
            "virtual": false,
            "description": "Selects a given number of  Feature|features from a {@link FeatureCollection}\nat random.",
            "parameters": [
                {
                    "name": "features",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "n",
                    "type": "number",
                    "description": "<p>number of features to select</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// create a lot of points\nvar points = turf.random('points', 1000);\n//=points\n\n// sample just a few of them\nvar sample = turf.sample(points, 10);\n//=sample"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>output</p>"
            }
        },
        {
            "name": "turf/simplify",
            "access": "",
            "virtual": false,
            "description": "Simplifies a  Feature containing a {@link LineString} or\n{@link Polygon} geometry. Internally uses simplify-js\nto perform simplification.",
            "parameters": [
                {
                    "name": "feature",
                    "type": "Feature",
                    "description": "<p>a feature to be simplified</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "tolerance",
                    "type": "number",
                    "description": "<p>simplification tolerance</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "highQuality",
                    "type": "boolean",
                    "description": "<p>whether or not to spend more time to create\na higher-quality simplification with a different algorithm</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var quantization = 50;\nvar minimumArea = 0;\nvar simplified = turf.simplify(polys, quantization, minimumArea);"
            ],
            "returns": {
                "type": "Feature",
                "description": "<p>output</p>"
            }
        },
        {
            "name": "turf/size",
            "access": "",
            "virtual": false,
            "description": "Takes a bbox and returns a new bbox with a size expanded or contracted\nby a factor of X.",
            "parameters": [
                {
                    "name": "bbox",
                    "type": "Array.<number>",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "factor",
                    "type": "number",
                    "description": "<p>the ratio of the new bbox to the old one</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var bbox = [0, 0, 10, 10]\nvar resized = turf.size(bbox, 2);\nvar features = turf.featurecollection([\n  turf.bboxPolygon(bbox),\n  turf.bboxPolygon(resized)]);\n//=features"
            ],
            "returns": {
                "type": "Array.<number>",
                "description": "<p>a resized bbox</p>"
            }
        },
        {
            "name": "turf/square",
            "access": "",
            "virtual": false,
            "description": "Calculates the minimum square bounding box for another bounding box.",
            "parameters": [
                {
                    "name": "bbox",
                    "type": "Array.<number>",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var bbox = [0,0,5,10];\nvar squared = turf.square(bbox)\nvar features = turf.featurecollection([\n  turf.bboxPolygon(bbox),\n  turf.bboxPolygon(squared)]);\n//=features"
            ],
            "returns": {
                "type": "Array.<number>",
                "description": "<p>A square surrounding that bounding box</p>"
            }
        },
        {
            "name": "turf/sum",
            "access": "",
            "virtual": false,
            "description": "Takes a set of polygons, a set of points, and tag polygons with the sum\nof point property values contained within.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "string",
                    "description": "<p>the field in input data to analyze</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "string",
                    "description": "<p>the field in which to store results</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]),\n  turf.polygon([[[10,0],[20,10],[20,20], [20,0]]])]);\nvar points = turf.featurecollection([\n  turf.point(5,5, {population: 200}),\n  turf.point(1,3, {population: 600}),\n  turf.point(14,2, {population: 100}),\n  turf.point(13,1, {population: 200}),\n  turf.point(19,7, {population: 300})]);\nvar aggregated = turf.sum(polygons, points, 'population', 'sum');\n//=polygons\n//=points\n//=aggregated"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features\nwith properties listed as <code>outField</code> values in <code>aggregations</code></p>"
            }
        },
        {
            "name": "turf/tag",
            "access": "",
            "virtual": false,
            "description": "Performs a spatial join on a set of points from a set of polygons.",
            "parameters": [
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a collection of Features with {@link Point}\ngeometries</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>collection of Features with {@link Polygon}\ngeometries</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "polyId",
                    "type": "string",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "containingPolyId",
                    "type": "string",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var bbox = [0, 0, 50, 50];\n// create a triangular grid of polygons\nvar triangleGrid = turf.tin(turf.grid(bbox, 10));\ntriangleGrid.features.forEach(function(f) {\n  f.properties.fill = '#' +\n    (~~(Math.random() * 16)).toString(16) +\n    (~~(Math.random() * 16)).toString(16) +\n    (~~(Math.random() * 16)).toString(16);\n  f.properties.stroke = 0;\n  f.properties['fill-opacity'] = 1;\n});\nvar randomPoints = turf.random('point', 30, {\n  bbox: bbox\n});\nvar both = turf.featurecollection(\n  triangleGrid.features.concat(randomPoints.features));\n//=both\nvar tagged = turf.tag(randomPoints, triangleGrid,\n                      'fill', 'marker-color');\n//=tagged"
            ],
            "returns": {
                "type": "LineString",
                "description": "<p>output</p>"
            }
        },
        {
            "name": "turf/tin",
            "access": "",
            "virtual": false,
            "description": "Takes a set of points and the name of a z-value property and\ncreates a Triangulated Irregular Network,\nor a TIN for short, returned as a collection of Polygons. These are often used\nfor developing elevation contour maps or stepped heat visualizations.\nThis triangulates the points, as well as adds properties called a, b,\nand c representing the value of the given propertyName at each of\nthe points that represent the corners of the triangle.",
            "parameters": [
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a GeoJSON FeatureCollection containing\nFeatures with {@link Point} geometries</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "propertyName",
                    "type": "string",
                    "description": "<p>name of the property from which to pull z values.\nThis is optional: if not given, then there will be no extra data added to the\nderived triangles.</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// generate some random point data\nvar points = turf.random('points', 30, {\n  bbox: [50, 30, 70, 50]\n});\n//=points\n// add a random property to each point between 0 and 9\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, 'z')\nfor (var i = 0; i < tin.features.length; i++) {\n  var properties  = tin.features[i].properties;\n  // roughly turn the properties of each\n  // triangle into a fill color\n  // so we can visualize the result\n  properties.fill = '#' + properties.a +\n    properties.b + properties.c;\n}\n//=tin"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>TIN output</p>"
            }
        },
        {
            "name": "turf/union",
            "access": "",
            "virtual": false,
            "description": "Combines two polygons into one",
            "parameters": [
                {
                    "name": "a",
                    "type": "Polygon",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "b",
                    "type": "Polygon",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var a = turf.polygon([[[10,0],[20,10],[20,0],[10,0]]]);\na.properties.fill = '#0f0';\nvar b = turf.polygon([[[10+5,0+5],[20+5,10+5],\n  [20+5,0+5],[10+5,0+5]]]);\nb.properties.fill = '#00f';\nvar union = turf.union(a, b);\n//=a\n//=b\n//=union"
            ],
            "returns": {
                "type": "Polygon",
                "description": "<p>combined polygon</p>"
            }
        },
        {
            "name": "turf/variance",
            "access": "",
            "virtual": false,
            "description": "Takes a set of polygons, a set of points, and tag polygons with the variance\nof point property values contained within.",
            "parameters": [
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Polygon} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "<p>a FeatureCollection of {@link Point} features</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "inField",
                    "type": "string",
                    "description": "<p>the field in input data to analyze</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "outField",
                    "type": "string",
                    "description": "<p>the field in which to store results</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var polygons = turf.featurecollection([\n  turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]),\n  turf.polygon([[[10,0],[20,10],[20,20], [20,0]]])]);\nvar points = turf.featurecollection([\n  turf.point(5,5, {population: 200}),\n  turf.point(1,3, {population: 600}),\n  turf.point(14,2, {population: 100}),\n  turf.point(13,1, {population: 200}),\n  turf.point(19,7, {population: 300})]);\nvar aggregated = turf.variance(polygons, points, 'population', 'variance');\n//=polygons\n//=points\n//=aggregated"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>a FeatureCollection of {@link Polygon} features\nwith properties listed as <code>outField</code> values in <code>aggregations</code></p>"
            }
        },
        {
            "name": "turf/within",
            "access": "",
            "virtual": false,
            "description": "Returns a FeatureCollection of points representing all points that fall\nwithin a collection of polygons.",
            "parameters": [
                {
                    "name": "points",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "polygons",
                    "type": "FeatureCollection",
                    "description": "",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var searchWithin = turf.featurecollection([\n  turf.polygon([\n    [[-46.653,-23.543],\n     [-46.634,-23.5346],\n     [-46.613,-23.543],\n     [-46.614,-23.559],\n     [-46.631,-23.567],\n     [-46.653,-23.560],\n     [-46.653,-23.543]]\n  ])\n]);\nvar points = turf.featurecollection([\n  turf.point([-46.6318, -23.5523]),\n  turf.point([-46.6246, -23.5325]),\n  turf.point([-46.6062, -23.5513]),\n  turf.point([-46.663, -23.554]),\n  turf.point([-46.643, -23.557])]);\nvar ptsWithin = turf.within(points, searchWithin);\n//=points\n//=searchWithin\n//=ptsWithin"
            ],
            "returns": {
                "type": "FeatureCollection",
                "description": "<p>A collection of all points that land\nwithin at least one polygon.</p>"
            }
        }
    ]
}
